import ZosNetworkFile from './ZosNetworkFile';
import { ProjectCompilerOptions } from '../compiler/solidity/SolidityProjectCompiler';
interface ConfigFileCompilerOptions {
    manager: string;
    solcVersion: string;
    contractsDir: string;
    artifactsDir: string;
    compilerSettings: {
        evmVersion: string;
        optimizer: {
            enabled: boolean;
            runs?: string;
        };
    };
}
export default class ZosPackageFile {
    fileName: string;
    data: {
        name: string;
        version: string;
        zosversion: string;
        dependencies: {
            [name: string]: string;
        };
        contracts: {
            [alias: string]: string;
        };
        publish: boolean;
        compiler: ConfigFileCompilerOptions;
    };
    static getLinkedDependencies(fileName?: string): string[];
    constructor(fileName?: string);
    exists(): boolean;
    readonly root: string;
    zosversion: string;
    publish: boolean;
    name: string;
    version: string;
    contracts: {
        [alias: string]: string;
    };
    readonly dependencies: {
        [name: string]: string;
    };
    readonly dependenciesNames: string[];
    getDependencyVersion(name: string): string;
    hasDependency(name: string): boolean;
    hasDependencies(): boolean;
    readonly contractAliases: string[];
    readonly contractNames: string[];
    readonly isPublished: boolean;
    readonly compilerOptions: ProjectCompilerOptions;
    setCompilerOptions(options: ProjectCompilerOptions): void;
    contract(alias: string): string;
    hasName(name: string): boolean;
    dependencyMatches(name: string, version: string): boolean;
    isCurrentVersion(version: string): boolean;
    hasContract(alias: string): boolean;
    hasContracts(): boolean;
    setDependency(name: string, version: string): void;
    unsetDependency(name: string): void;
    addContract(alias: string, name: string | undefined): void;
    unsetContract(alias: string): void;
    networkFile(network: any): ZosNetworkFile | never;
    write(): void;
    private hasChanged;
}
export {};
